import os
import subprocess
import sys
from pathlib import Path
import difflib
import pytest
from tests.conftest import get_chunk_start


def test_header_layout(tmp_path):
    out = tmp_path / "nytprof.out"
    env = {
        **os.environ,
        "PYNYTPROF_WRITER": "py",
        "PYTHONPATH": str(Path(__file__).resolve().parents[1] / "src"),
    }
    subprocess.check_call(
        [sys.executable, "-m", "pynytprof.tracer", "-o", str(out), "-e", "pass"],
        env=env,
    )
    data = out.read_bytes()
    p_off = get_chunk_start(data)
    header = data[:p_off]
    assert header.endswith(b"\n"), "header must end with newline"
    assert not header.endswith(b"\n\n"), "header must not have extra blank line"

    lines = header.decode().splitlines()
    expected_keys = [
        "NYTProf 5 0",
        "#Perl profile database. Generated by Pynytprof on",
        ":basetime",
        ":application",
        ":perl_version",
        ":nv_size",
        ":xs_version",
        ":PL_perldb",
        ":clock_id",
        ":ticks_per_sec",
        "!usecputime",
        "!subs",
        "!blocks",
        "!leave",
        "!expand",
        "!trace",
        "!use_db_sub",
        "!compress",
        "!clock",
        "!stmts",
        "!slowops",
        "!findcaller",
        "!forkdepth",
        "!perldb",
        "!nameevals",
        "!nameanonsubs",
        "!calls",
        "!evals",
    ]
    actual_keys = []
    for line in lines:
        if line.startswith("#Perl profile database."):
            actual_keys.append("#Perl profile database. Generated by Pynytprof on")
        else:
            actual_keys.append(line.split("=", 1)[0])

    if actual_keys != expected_keys:
        diff = "\n".join(difflib.ndiff(expected_keys, actual_keys))
        pytest.fail(f"header layout mismatch:\n{diff}")

    # ensure no unknown ! keys
    for key in actual_keys:
        if key.startswith("!") and key not in expected_keys:
            pytest.fail(f"unknown option {key}")

    assert lines[-1].startswith("!evals=")
