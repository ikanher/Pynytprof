import os
import subprocess
import sys
from pathlib import Path


def profile_bytes(tmp_path):
    out = tmp_path / 'nytprof.out'
    env = {
        **os.environ,
        'PYNYTPROF_WRITER': 'py',
        'PYTHONPATH': str(Path(__file__).resolve().parents[1] / 'src'),
    }
    subprocess.check_call([
        sys.executable,
        '-m', 'pynytprof.tracer',
        '-o', str(out),
        '-e', 'pass',
    ], env=env)
    return out.read_bytes()


def test_header_spec(tmp_path):
    data = profile_bytes(tmp_path)
    header = data.split(b'\nP', 1)[0] + b'\n'
    lines = header.rstrip(b'\n').split(b'\n')

    # 1) no empty lines
    assert all(lines)

    # 2) ensure expected keys present once
    wanted = {
        'NYTProf 5 0',
        '#Perl profile database. Generated by Pynytprof on',
        ':basetime',
        ':application',
        ':perl_version',
        ':nv_size',
        ':xs_version',
        ':PL_perldb',
        ':clock_id',
        ':ticks_per_sec',
        '!usecputime',
        '!subs',
        '!blocks',
        '!leave',
        '!expand',
        '!trace',
        '!use_db_sub',
        '!compress',
        '!clock',
        '!stmts',
        '!slowops',
        '!findcaller',
        '!forkdepth',
        '!perldb',
        '!nameevals',
        '!nameanonsubs',
        '!calls',
        '!evals',
    }
    seen = []
    for l in lines:
        if l.startswith(b'#Perl profile database.'):
            seen.append('#Perl profile database. Generated by Pynytprof on')
        else:
            seen.append(l.split(b'=', 1)[0].decode())
    assert wanted == set(seen)

    # 3) exactly one LF before 'P'
    idx_p = data.index(b'\nP') + 1
    assert data[idx_p - 1] == 0x0A and data[idx_p - 2] != 0x0A
